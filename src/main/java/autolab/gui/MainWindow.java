/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package autolab.gui;

import autolab.files.FileFilters;
import autolab.geolayer.GridLayer;
import autolab.geolayer.Map;
import autolab.grid.EsriASCIIGridReader;
import autolab.grid.Geogrid;
import autolab.grid.GridProcessor;
import autolab.math.Stats;
import autolab.math.Stats.FilterMethod;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;
import autolab.geolayer.MapPanel;
import autolab.grid.ESRIASCIIGridExporter;
import autolab.grid.GridProcessor.ProcessingType;
import autolab.math.Stats.StretchMethod;
import com.jhlabs.map.Ellipsoid;
import com.jhlabs.map.proj.Projection;
import com.jhlabs.map.proj.ProjectionFactory;
import org.locationtech.jts.geom.Coordinate;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.event.ItemEvent;
import static java.lang.Thread.sleep;
import java.text.DecimalFormat;
import javax.swing.BoundedRangeModel;

/**
 *
 * @author tsamsonov
 */
public class MainWindow extends javax.swing.JFrame {

    /*
     Tha map object used for data visualization
    */
    private final Map map;

    /*
    Grid processor
    */
    GridProcessor gp;

    /*
    Projection names are derived befor the program is showed on the screen
    */
    Object[] projNames;

    /*
    Filters used for processing
    */
    FilterMethod[] filterNames;

    /*
    Source grid layer
    */
    GridLayer sourceLayer;

    /*
    Layer with results of fixed kernel filtering
    */
    GridLayer fixedLayer;

    /*
    Layer with results of variable kernel filtering
    */
    GridLayer affineLayer;

    /*
    Layer with results of variable kernel filtering
    */
    GridLayer directLayer;

    /*
    Layer with areal distortions
    */
    GridLayer distLayer;

    /*
    Projection currently used
    */
    Projection projection;

    /**
     * Creates new form MainWindow
     */
    public MainWindow(){
        map = new Map();

        // get available projections from JMapProjLib
        projNames = ProjectionFactory.getOrderedProjectionNames();

        // get available filter methods
        filterNames = FilterMethod.values();

        initComponents();

        projectionBox.setSelectedItem("Mercator");

        // pass xValue and yValue to MapPanel to monitor current coordinates
        ((MapPanel)(GLPanel)).setCoordinateLabels(xValue, yValue, zValueSource);

        statsPanel.getInsets().set(26, 20, 5, 5);

        this.setSize(1400, 800);

        this.setResizable(false);

        addWindowListener(new WindowAdapter(){
        @Override
            public void windowClosing(WindowEvent e) {
                ((MapPanel)GLPanel).stop();
                dispose();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        naviButtonGroup = new javax.swing.ButtonGroup();
        kernelGroup = new javax.swing.ButtonGroup();
        displayGroup = new javax.swing.ButtonGroup();
        histGroup = new javax.swing.ButtonGroup();
        textButtonGroup = new javax.swing.ButtonGroup();
        progressPanel = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        xLabel = new javax.swing.JLabel();
        jSeparator7 = new javax.swing.JSeparator();
        xValue = new javax.swing.JLabel();
        jSeparator9 = new javax.swing.JSeparator();
        yLabel = new javax.swing.JLabel();
        jSeparator8 = new javax.swing.JSeparator();
        yValue = new javax.swing.JLabel();
        jSeparator10 = new javax.swing.JSeparator();
        procLabel = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        procName = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        progressBar = new javax.swing.JProgressBar();
        jSeparator3 = new javax.swing.JSeparator();
        toolsPanel = new javax.swing.JPanel();
        mainToolBar = new javax.swing.JToolBar();
        mainToolBar.addSeparator();
        loadButton = new javax.swing.JButton();
        naviToolbar = new javax.swing.JToolBar();
        jSeparator6 = new javax.swing.JToolBar.Separator();
        panButton = new javax.swing.JToggleButton();
        zoomInButton = new javax.swing.JToggleButton();
        zoomOutButton = new javax.swing.JToggleButton();
        selectButton = new javax.swing.JToggleButton();
        fitWidthButton = new javax.swing.JButton();
        fitHeightButton = new javax.swing.JButton();
        fileLabel = new javax.swing.JLabel();
        prefsPanel = new javax.swing.JPanel();
        statsPanel = new javax.swing.JPanel();
        rowLabel = new javax.swing.JLabel();
        rowData = new javax.swing.JLabel();
        colLabel = new javax.swing.JLabel();
        colData = new javax.swing.JLabel();
        resLabel = new javax.swing.JLabel();
        resData = new javax.swing.JLabel();
        xMinLabel = new javax.swing.JLabel();
        xMaxLabel = new javax.swing.JLabel();
        xMinData = new javax.swing.JLabel();
        yMinData = new javax.swing.JLabel();
        xMaxData = new javax.swing.JLabel();
        yMaxData = new javax.swing.JLabel();
        procPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        projectionBox = new javax.swing.JComboBox(projNames);
        jLabel2 = new javax.swing.JLabel();
        jToolBar1 = new javax.swing.JToolBar();
        squareButton = new javax.swing.JToggleButton();
        circleButton = new javax.swing.JToggleButton();
        jLabel3 = new javax.swing.JLabel();
        kernelSlider = new javax.swing.JSlider();
        jLabel9 = new javax.swing.JLabel();
        latSpinner = new javax.swing.JSpinner();
        jLabel11 = new javax.swing.JLabel();
        longSpinner = new javax.swing.JSpinner();
        graticuleBox = new javax.swing.JCheckBox();
        tissotBox = new javax.swing.JCheckBox();
        jLabel13 = new javax.swing.JLabel();
        operationBox = new javax.swing.JComboBox(filterNames);
        affButton = new javax.swing.JButton();
        kernelSpinner = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        phiSpinner = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();
        lamSpinner = new javax.swing.JSpinner();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        tissotSlider = new javax.swing.JSlider();
        clipBox = new javax.swing.JCheckBox();
        voronoyBox = new javax.swing.JCheckBox();
        projectionDetailsButton = new javax.swing.JButton();
        zSpinner = new javax.swing.JSpinner();
        zLabel = new javax.swing.JLabel();
        fSpinner = new javax.swing.JSpinner();
        fLabel = new javax.swing.JLabel();
        fixButton = new javax.swing.JButton();
        dirButton = new javax.swing.JButton();
        rightPanel = new javax.swing.JPanel();
        rasterPanel = new javax.swing.JPanel();
        sourceButton = new javax.swing.JRadioButton();
        fixedButton = new javax.swing.JRadioButton();
        affineButton = new javax.swing.JRadioButton();
        scaleButton = new javax.swing.JRadioButton();
        directButton = new javax.swing.JRadioButton();
        javax.swing.JButton exportButton = new javax.swing.JButton();
        zValueSource = new javax.swing.JLabel();
        zValueFixed = new javax.swing.JLabel();
        zValueAffine = new javax.swing.JLabel();
        zValueDirect = new javax.swing.JLabel();
        zValueAreal = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        zMinLabel = new javax.swing.JLabel();
        zMinData = new javax.swing.JLabel();
        zMaxLabel = new javax.swing.JLabel();
        zMaxData = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        meanData = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        meanCorrData = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        mrsqData = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        mrsqCorrData = new javax.swing.JLabel();
        visPanel = new javax.swing.JPanel();
        minmaxButton = new javax.swing.JRadioButton();
        equalizeButton = new javax.swing.JRadioButton();
        stdevButton = new javax.swing.JRadioButton();
        jSpinner1 = new javax.swing.JSpinner();
        jLabel19 = new javax.swing.JLabel();
        colorBox = new javax.swing.JCheckBox();
        textBox = new javax.swing.JCheckBox();
        gammaButton = new javax.swing.JRadioButton();
        deltaButton = new javax.swing.JRadioButton();
        thetaButton = new javax.swing.JRadioButton();
        betaButton = new javax.swing.JRadioButton();
        hButton = new javax.swing.JRadioButton();
        kButton = new javax.swing.JRadioButton();
        aButton = new javax.swing.JRadioButton();
        bButton = new javax.swing.JRadioButton();
        labelScaleSlider = new javax.swing.JSlider();
        jLabel16 = new javax.swing.JLabel();
        wButton = new javax.swing.JRadioButton();
        sButton = new javax.swing.JRadioButton();
        GLPanel = new autolab.geolayer.MapPanel(map);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Raster Processor");
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                formMouseMoved(evt);
            }
        });

        progressPanel.setBackground(new java.awt.Color(255, 255, 255));
        progressPanel.setPreferredSize(new java.awt.Dimension(961, 32));
        progressPanel.setLayout(new javax.swing.BoxLayout(progressPanel, javax.swing.BoxLayout.LINE_AXIS));

        jSeparator1.setForeground(new java.awt.Color(255, 255, 255));
        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator1.setMaximumSize(new java.awt.Dimension(5, 32767));
        jSeparator1.setMinimumSize(new java.awt.Dimension(5, 10));
        jSeparator1.setPreferredSize(new java.awt.Dimension(10, 10));
        progressPanel.add(jSeparator1);

        xLabel.setFont(new java.awt.Font("Euphemia UCAS", 1, 10)); // NOI18N
        xLabel.setText("X:");
        progressPanel.add(xLabel);

        jSeparator7.setForeground(new java.awt.Color(255, 255, 255));
        jSeparator7.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator7.setMaximumSize(new java.awt.Dimension(5, 32767));
        jSeparator7.setMinimumSize(new java.awt.Dimension(5, 10));
        jSeparator7.setPreferredSize(new java.awt.Dimension(5, 10));
        progressPanel.add(jSeparator7);

        xValue.setFont(new java.awt.Font("Euphemia UCAS", 0, 10)); // NOI18N
        xValue.setText("-00 000 000");
        xValue.setMaximumSize(new java.awt.Dimension(60, 16));
        xValue.setMinimumSize(new java.awt.Dimension(60, 16));
        xValue.setPreferredSize(new java.awt.Dimension(70, 16));
        progressPanel.add(xValue);

        jSeparator9.setForeground(new java.awt.Color(255, 255, 255));
        jSeparator9.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator9.setMaximumSize(new java.awt.Dimension(5, 32767));
        jSeparator9.setMinimumSize(new java.awt.Dimension(5, 10));
        jSeparator9.setPreferredSize(new java.awt.Dimension(10, 10));
        progressPanel.add(jSeparator9);

        yLabel.setFont(new java.awt.Font("Euphemia UCAS", 1, 10)); // NOI18N
        yLabel.setText("Y:");
        progressPanel.add(yLabel);

        jSeparator8.setForeground(new java.awt.Color(255, 255, 255));
        jSeparator8.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator8.setMaximumSize(new java.awt.Dimension(5, 32767));
        jSeparator8.setMinimumSize(new java.awt.Dimension(5, 10));
        jSeparator8.setPreferredSize(new java.awt.Dimension(5, 10));
        progressPanel.add(jSeparator8);

        yValue.setFont(new java.awt.Font("Euphemia UCAS", 0, 10)); // NOI18N
        yValue.setText("-00 000 000");
        yValue.setPreferredSize(new java.awt.Dimension(70, 16));
        progressPanel.add(yValue);

        jSeparator10.setForeground(new java.awt.Color(255, 255, 255));
        jSeparator10.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator10.setMaximumSize(new java.awt.Dimension(5, 32767));
        jSeparator10.setMinimumSize(new java.awt.Dimension(5, 10));
        jSeparator10.setPreferredSize(new java.awt.Dimension(15, 10));
        progressPanel.add(jSeparator10);

        procLabel.setFont(new java.awt.Font("Eurostile", 0, 14)); // NOI18N
        procLabel.setText("Processing:");
        progressPanel.add(procLabel);

        jSeparator2.setForeground(new java.awt.Color(255, 255, 255));
        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator2.setMaximumSize(new java.awt.Dimension(10, 32767));
        progressPanel.add(jSeparator2);

        procName.setFont(new java.awt.Font("Eurostile", 1, 14)); // NOI18N
        procName.setText("Idle");
        progressPanel.add(procName);

        jSeparator4.setForeground(new java.awt.Color(255, 255, 255));
        jSeparator4.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator4.setMaximumSize(new java.awt.Dimension(3000, 32767));
        jSeparator4.setPreferredSize(new java.awt.Dimension(5, 10));
        progressPanel.add(jSeparator4);
        progressPanel.add(progressBar);

        jSeparator3.setForeground(new java.awt.Color(255, 255, 255));
        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator3.setMaximumSize(new java.awt.Dimension(100, 32767));
        progressPanel.add(jSeparator3);

        getContentPane().add(progressPanel, java.awt.BorderLayout.SOUTH);

        toolsPanel.setBackground(new java.awt.Color(255, 255, 255));
        toolsPanel.setMaximumSize(new java.awt.Dimension(32767, 50));
        toolsPanel.setMinimumSize(new java.awt.Dimension(100, 32));
        toolsPanel.setPreferredSize(new java.awt.Dimension(943, 50));
        toolsPanel.setLayout(new javax.swing.BoxLayout(toolsPanel, javax.swing.BoxLayout.LINE_AXIS));

        mainToolBar.setBackground(new java.awt.Color(255, 255, 255));
        mainToolBar.setFloatable(false);
        mainToolBar.setForeground(new java.awt.Color(255, 255, 255));
        mainToolBar.setRollover(true);

        loadButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/autolab/gui/addRaster_32.png"))); // NOI18N
        loadButton.setBorderPainted(false);
        loadButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        loadButton.setFocusable(false);
        loadButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        loadButton.setMargin(new java.awt.Insets(0, 5, 0, 5));
        loadButton.setMaximumSize(new java.awt.Dimension(30, 30));
        loadButton.setMinimumSize(new java.awt.Dimension(30, 30));
        loadButton.setPreferredSize(new java.awt.Dimension(30, 30));
        loadButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });
        mainToolBar.add(loadButton);
        mainToolBar.addSeparator();

        toolsPanel.add(mainToolBar);

        naviToolbar.setBackground(new java.awt.Color(255, 255, 255));
        naviToolbar.setFloatable(false);
        naviToolbar.setRollover(true);
        naviToolbar.add(jSeparator6);

        naviButtonGroup.add(panButton);
        panButton.setFont(new java.awt.Font("Euphemia UCAS", 0, 11)); // NOI18N
        panButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/autolab/gui/PanBlue16x16.png"))); // NOI18N
        panButton.setText("Pan");
        panButton.setToolTipText("");
        panButton.setFocusable(false);
        panButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        panButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        panButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                panButtonItemStateChanged(evt);
            }
        });
        naviToolbar.add(panButton);

        naviButtonGroup.add(zoomInButton);
        zoomInButton.setFont(new java.awt.Font("Euphemia UCAS", 0, 11)); // NOI18N
        zoomInButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/autolab/gui/ZoomInBlue16x16.png"))); // NOI18N
        zoomInButton.setText("Zoom In");
        zoomInButton.setFocusable(false);
        zoomInButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        zoomInButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        zoomInButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                zoomInButtonItemStateChanged(evt);
            }
        });
        naviToolbar.add(zoomInButton);

        naviButtonGroup.add(zoomOutButton);
        zoomOutButton.setFont(new java.awt.Font("Euphemia UCAS", 0, 11)); // NOI18N
        zoomOutButton.setIcon(new javax.swing.ImageIcon("/Volumes/Dropbox/Dropbox/NetBeans/Autolab/Icons/ZoomOutBlue16x16.png")); // NOI18N
        zoomOutButton.setText("Zoom Out");
        zoomOutButton.setToolTipText("");
        zoomOutButton.setFocusable(false);
        zoomOutButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        zoomOutButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        zoomOutButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                zoomOutButtonItemStateChanged(evt);
            }
        });
        naviToolbar.add(zoomOutButton);

        naviButtonGroup.add(selectButton);
        selectButton.setIcon(new javax.swing.ImageIcon("/Volumes/Dropbox/Dropbox/NetBeans/Autolab/Icons/ArrowBlue16x16.png")); // NOI18N
        selectButton.setSelected(true);
        selectButton.setText("Select");
        selectButton.setFocusable(false);
        selectButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        selectButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        selectButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                selectButtonItemStateChanged(evt);
            }
        });
        naviToolbar.add(selectButton);

        toolsPanel.add(naviToolbar);

        fitWidthButton.setFont(new java.awt.Font("Euphemia UCAS", 0, 12)); // NOI18N
        fitWidthButton.setText("← Fit Width →");
        fitWidthButton.setFocusable(false);
        fitWidthButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        fitWidthButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        fitWidthButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fitWidthButtonActionPerformed(evt);
            }
        });
        toolsPanel.add(fitWidthButton);

        fitHeightButton.setFont(new java.awt.Font("Euphemia UCAS", 0, 12)); // NOI18N
        fitHeightButton.setText("↓ Fit Height ↑");
        fitHeightButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fitHeightButtonActionPerformed(evt);
            }
        });
        toolsPanel.add(fitHeightButton);

        fileLabel.setFont(new java.awt.Font("Euphemia UCAS", 1, 13)); // NOI18N
        fileLabel.setText("No file currently opened");
        toolsPanel.add(fileLabel);

        getContentPane().add(toolsPanel, java.awt.BorderLayout.NORTH);

        prefsPanel.setBackground(new java.awt.Color(229, 229, 229));
        prefsPanel.setMaximumSize(new java.awt.Dimension(200, 32767));
        prefsPanel.setPreferredSize(new java.awt.Dimension(200, 601));

        statsPanel.setBackground(new java.awt.Color(255, 255, 255));
        statsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1), "Raster Geometry", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.BELOW_TOP, new java.awt.Font("Euphemia UCAS", 0, 14), new java.awt.Color(0, 102, 153))); // NOI18N
        statsPanel.setFont(new java.awt.Font("Euphemia UCAS", 0, 13)); // NOI18N
        statsPanel.setName("Raster Statistics"); // NOI18N
        statsPanel.setLayout(new java.awt.GridLayout(6, 2));

        rowLabel.setFont(new java.awt.Font("Euphemia UCAS", 0, 12)); // NOI18N
        rowLabel.setText("Rows");
        statsPanel.add(rowLabel);

        rowData.setFont(new java.awt.Font("Euphemia UCAS", 1, 12)); // NOI18N
        rowData.setText("No data");
        statsPanel.add(rowData);

        colLabel.setFont(new java.awt.Font("Euphemia UCAS", 0, 12)); // NOI18N
        colLabel.setText("Columns");
        statsPanel.add(colLabel);

        colData.setFont(new java.awt.Font("Euphemia UCAS", 1, 12)); // NOI18N
        colData.setText("No data");
        statsPanel.add(colData);

        resLabel.setFont(new java.awt.Font("Euphemia UCAS", 0, 12)); // NOI18N
        resLabel.setText("Resolution");
        statsPanel.add(resLabel);

        resData.setFont(new java.awt.Font("Euphemia UCAS", 1, 12)); // NOI18N
        resData.setText("No data");
        statsPanel.add(resData);

        xMinLabel.setFont(new java.awt.Font("Euphemia UCAS", 0, 12)); // NOI18N
        xMinLabel.setText("X range");
        xMinLabel.getInsets().set(0, 5, 0, 0);
        statsPanel.add(xMinLabel);

        xMaxLabel.setFont(new java.awt.Font("Euphemia UCAS", 0, 12)); // NOI18N
        xMaxLabel.setText("Y range");
        statsPanel.add(xMaxLabel);

        xMinData.setFont(new java.awt.Font("Euphemia UCAS", 1, 12)); // NOI18N
        xMinData.setText("No data");
        statsPanel.add(xMinData);

        yMinData.setFont(new java.awt.Font("Euphemia UCAS", 1, 12)); // NOI18N
        yMinData.setText("No data");
        statsPanel.add(yMinData);

        xMaxData.setFont(new java.awt.Font("Euphemia UCAS", 1, 12)); // NOI18N
        xMaxData.setText("No data");
        statsPanel.add(xMaxData);

        yMaxData.setFont(new java.awt.Font("Euphemia UCAS", 1, 12)); // NOI18N
        yMaxData.setText("No data");
        statsPanel.add(yMaxData);

        procPanel.setBackground(new java.awt.Color(255, 255, 255));
        procPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1), "Processing Parameters", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.BELOW_TOP, new java.awt.Font("Euphemia UCAS", 0, 14), new java.awt.Color(0, 102, 153))); // NOI18N

        jLabel1.setFont(new java.awt.Font("Euphemia UCAS", 1, 13)); // NOI18N
        jLabel1.setText("Projection");

        projectionBox.setFont(new java.awt.Font("Euphemia UCAS", 0, 13)); // NOI18N
        projectionBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                projectionBoxItemStateChanged(evt);
            }
        });
        projectionBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                projectionBoxActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Euphemia UCAS", 1, 13)); // NOI18N
        jLabel2.setText("Kernel");

        jToolBar1.setBackground(new java.awt.Color(255, 255, 255));
        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);
        jToolBar1.setBorderPainted(false);

        kernelGroup.add(squareButton);
        squareButton.setFont(new java.awt.Font("Euphemia UCAS", 0, 11)); // NOI18N
        squareButton.setIcon(new javax.swing.ImageIcon("/Volumes/Dropbox/Dropbox/NetBeans/Icons/Square.png")); // NOI18N
        squareButton.setSelected(true);
        squareButton.setText("Square");
        jToolBar1.add(squareButton);

        kernelGroup.add(circleButton);
        circleButton.setFont(new java.awt.Font("Euphemia UCAS", 0, 11)); // NOI18N
        circleButton.setIcon(new javax.swing.ImageIcon("/Volumes/Dropbox/Dropbox/NetBeans/Icons/Circel.png")); // NOI18N
        circleButton.setText("Circle");
        jToolBar1.add(circleButton);

        jLabel3.setFont(new java.awt.Font("Euphemia UCAS", 0, 13)); // NOI18N
        jLabel3.setText("Diameter");

        kernelSlider.setMajorTickSpacing(20);
        kernelSlider.setMinimum(1);
        kernelSlider.setMinorTickSpacing(10);
        kernelSlider.setValue(20);
        kernelSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                kernelSliderStateChanged(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Euphemia UCAS", 0, 13)); // NOI18N
        jLabel9.setText("Lat:");

        latSpinner.setFont(new java.awt.Font("Euphemia UCAS", 0, 12)); // NOI18N
        latSpinner.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(5.0f), Float.valueOf(0.1f), Float.valueOf(60.0f), Float.valueOf(0.1f)));
        latSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                latSpinnerStateChanged(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Euphemia UCAS", 0, 13)); // NOI18N
        jLabel11.setText("Lon:");

        longSpinner.setFont(new java.awt.Font("Euphemia UCAS", 0, 12)); // NOI18N
        longSpinner.setModel(new javax.swing.SpinnerNumberModel(10, 1, 90, 1));
        longSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                longSpinnerStateChanged(evt);
            }
        });

        graticuleBox.setFont(new java.awt.Font("Euphemia UCAS", 1, 13)); // NOI18N
        graticuleBox.setText("Graticule");
        graticuleBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                graticuleBoxItemStateChanged(evt);
            }
        });
        graticuleBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                graticuleBoxActionPerformed(evt);
            }
        });

        tissotBox.setFont(new java.awt.Font("Euphemia UCAS", 1, 13)); // NOI18N
        tissotBox.setText("Ellipses");
        tissotBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                tissotBoxItemStateChanged(evt);
            }
        });
        tissotBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tissotBoxActionPerformed(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Euphemia UCAS", 1, 13)); // NOI18N
        jLabel13.setText("Operation");

        operationBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                operationBoxItemStateChanged(evt);
            }
        });

        affButton.setFont(new java.awt.Font("Euphemia UCAS", 1, 13)); // NOI18N
        affButton.setForeground(new java.awt.Color(255, 102, 51));
        affButton.setText("Aff >");
        affButton.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        affButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        affButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                affButtonMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                affButtonMouseEntered(evt);
            }
        });
        affButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                affButtonActionPerformed(evt);
            }
        });

        kernelSpinner.setModel(new javax.swing.SpinnerNumberModel(20, 1, 100, 1));
        kernelSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                kernelSpinnerStateChanged(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Euphemia UCAS", 0, 13)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("φº");

        phiSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                phiSpinnerStateChanged(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Euphemia UCAS", 0, 13)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("λº");

        lamSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                lamSpinnerStateChanged(evt);
            }
        });

        jLabel6.setText("km");

        jLabel7.setFont(new java.awt.Font("Euphemia UCAS", 0, 13)); // NOI18N
        jLabel7.setText("Scale:");

        tissotSlider.setMaximum(50);
        tissotSlider.setMinimum(1);
        tissotSlider.setValue(25);
        tissotSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tissotSliderStateChanged(evt);
            }
        });

        clipBox.setFont(new java.awt.Font("Euphemia UCAS", 0, 13)); // NOI18N
        clipBox.setText("Clip");
        clipBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                clipBoxItemStateChanged(evt);
            }
        });

        voronoyBox.setFont(new java.awt.Font("Euphemia UCAS", 0, 13)); // NOI18N
        voronoyBox.setText("Show zones");
        voronoyBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                voronoyBoxItemStateChanged(evt);
            }
        });
        voronoyBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                voronoyBoxStateChanged(evt);
            }
        });

        projectionDetailsButton.setFont(new java.awt.Font("Euphemia UCAS", 0, 10)); // NOI18N
        projectionDetailsButton.setForeground(new java.awt.Color(153, 153, 153));
        projectionDetailsButton.setText("Details >>");
        projectionDetailsButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        projectionDetailsButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        projectionDetailsButton.setMinimumSize(new java.awt.Dimension(12, 10));
        projectionDetailsButton.setPreferredSize(new java.awt.Dimension(12, 10));
        projectionDetailsButton.setSize(new java.awt.Dimension(97, 10));
        projectionDetailsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                projectionDetailsButtonActionPerformed(evt);
            }
        });

        zSpinner.setFont(new java.awt.Font("Euphemia UCAS", 0, 12)); // NOI18N
        zSpinner.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(1.0f), Float.valueOf(0.01f), Float.valueOf(1000.0f), Float.valueOf(0.01f)));

        zLabel.setFont(new java.awt.Font("Euphemia UCAS", 0, 13)); // NOI18N
        zLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        zLabel.setText("Z*");

        fSpinner.setFont(new java.awt.Font("Euphemia UCAS", 0, 12)); // NOI18N
        fSpinner.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(1.0f), Float.valueOf(0.01f), Float.valueOf(100.0f), Float.valueOf(0.01f)));

        fLabel.setFont(new java.awt.Font("Euphemia UCAS", 0, 13)); // NOI18N
        fLabel.setText("D*");
        fLabel.setToolTipText("");

        fixButton.setFont(new java.awt.Font("Euphemia UCAS", 1, 13)); // NOI18N
        fixButton.setForeground(new java.awt.Color(0, 153, 255));
        fixButton.setText("Fix >");
        fixButton.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        fixButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        fixButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                fixButtonMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                fixButtonMouseEntered(evt);
            }
        });
        fixButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fixButtonActionPerformed(evt);
            }
        });

        dirButton.setFont(new java.awt.Font("Euphemia UCAS", 1, 13)); // NOI18N
        dirButton.setForeground(new java.awt.Color(255, 0, 51));
        dirButton.setText("Dir >");
        dirButton.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        dirButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        dirButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                dirButtonMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                dirButtonMouseEntered(evt);
            }
        });
        dirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dirButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout procPanelLayout = new javax.swing.GroupLayout(procPanel);
        procPanel.setLayout(procPanelLayout);
        procPanelLayout.setHorizontalGroup(
            procPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(procPanelLayout.createSequentialGroup()
                .addGroup(procPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(procPanelLayout.createSequentialGroup()
                        .addGroup(procPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(procPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(procPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(3, 3, 3)
                                .addGroup(procPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(phiSpinner)
                                    .addComponent(latSpinner)))
                            .addComponent(tissotBox))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(clipBox))
                    .addComponent(graticuleBox)
                    .addGroup(procPanelLayout.createSequentialGroup()
                        .addGap(91, 91, 91)
                        .addGroup(procPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(3, 3, 3)
                        .addGroup(procPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lamSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(longSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(procPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel13))
                    .addGroup(procPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(voronoyBox))
                    .addGroup(procPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(kernelSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(procPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel1)
                        .addGap(26, 26, 26)
                        .addComponent(projectionDetailsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(kernelSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(procPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(fixButton, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(affButton, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dirButton, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(procPanelLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(procPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(procPanelLayout.createSequentialGroup()
                        .addComponent(operationBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(procPanelLayout.createSequentialGroup()
                        .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(procPanelLayout.createSequentialGroup()
                        .addComponent(projectionBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(6, 6, 6))
                    .addGroup(procPanelLayout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tissotSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addContainerGap())))
            .addGroup(procPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(zLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(zSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        procPanelLayout.setVerticalGroup(
            procPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(procPanelLayout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(procPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(projectionDetailsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(projectionBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(procPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(graticuleBox)
                    .addComponent(clipBox))
                .addGap(1, 1, 1)
                .addGroup(procPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(latSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(longSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(procPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(phiSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(lamSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tissotBox, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(procPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(tissotSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel13)
                .addGap(4, 4, 4)
                .addComponent(operationBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addGroup(procPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(voronoyBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(procPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(kernelSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(1, 1, 1)
                .addComponent(kernelSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(procPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(procPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                        .addComponent(fSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(zSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(procPanelLayout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(procPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fLabel)
                            .addComponent(zLabel))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(procPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(affButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fixButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dirButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(93, 93, 93))
        );

        javax.swing.GroupLayout prefsPanelLayout = new javax.swing.GroupLayout(prefsPanel);
        prefsPanel.setLayout(prefsPanelLayout);
        prefsPanelLayout.setHorizontalGroup(
            prefsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(prefsPanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(prefsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(statsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(procPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        prefsPanelLayout.setVerticalGroup(
            prefsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, prefsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(procPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 508, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(125, Short.MAX_VALUE))
        );

        statsPanel.getInsets().set(0, 0, 0, 0);
        statsPanel.getAccessibleContext().setAccessibleName("");

        getContentPane().add(prefsPanel, java.awt.BorderLayout.WEST);

        rightPanel.setBackground(new java.awt.Color(229, 229, 229));
        rightPanel.setPreferredSize(new java.awt.Dimension(200, 813));

        rasterPanel.setBackground(new java.awt.Color(255, 255, 255));
        rasterPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1), "Raster", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.BELOW_TOP, new java.awt.Font("Euphemia UCAS", 0, 14), new java.awt.Color(0, 102, 153))); // NOI18N
        rasterPanel.setForeground(new java.awt.Color(255, 255, 255));

        displayGroup.add(sourceButton);
        sourceButton.setFont(new java.awt.Font("Euphemia UCAS", 0, 13)); // NOI18N
        sourceButton.setSelected(true);
        sourceButton.setText("Source");
        sourceButton.setEnabled(false);
        sourceButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                sourceButtonItemStateChanged(evt);
            }
        });

        displayGroup.add(fixedButton);
        fixedButton.setFont(new java.awt.Font("Euphemia UCAS", 0, 13)); // NOI18N
        fixedButton.setText("Fixed");
        fixedButton.setEnabled(false);
        fixedButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                fixedButtonItemStateChanged(evt);
            }
        });
        fixedButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fixedButtonActionPerformed(evt);
            }
        });

        displayGroup.add(affineButton);
        affineButton.setFont(new java.awt.Font("Euphemia UCAS", 0, 13)); // NOI18N
        affineButton.setText("Affine");
        affineButton.setEnabled(false);
        affineButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                affineButtonItemStateChanged(evt);
            }
        });

        displayGroup.add(scaleButton);
        scaleButton.setFont(new java.awt.Font("Euphemia UCAS", 0, 13)); // NOI18N
        scaleButton.setForeground(new java.awt.Color(0, 102, 153));
        scaleButton.setText("Areal");
        scaleButton.setEnabled(false);
        scaleButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                scaleButtonItemStateChanged(evt);
            }
        });

        displayGroup.add(directButton);
        directButton.setFont(new java.awt.Font("Euphemia UCAS", 0, 13)); // NOI18N
        directButton.setText("Direct");
        directButton.setEnabled(false);
        directButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                directButtonItemStateChanged(evt);
            }
        });
        directButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                directButtonActionPerformed(evt);
            }
        });

        exportButton.setFont(new java.awt.Font("Euphemia UCAS", 0, 12)); // NOI18N
        exportButton.setText("Export");
        exportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportButtonActionPerformed(evt);
            }
        });

        zValueSource.setFont(new java.awt.Font("Euphemia UCAS", 1, 12)); // NOI18N

        zValueFixed.setFont(new java.awt.Font("Euphemia UCAS", 1, 12)); // NOI18N

        zValueAffine.setFont(new java.awt.Font("Euphemia UCAS", 1, 12)); // NOI18N

        zValueDirect.setFont(new java.awt.Font("Euphemia UCAS", 1, 12)); // NOI18N

        zValueAreal.setFont(new java.awt.Font("Euphemia UCAS", 1, 12)); // NOI18N

        javax.swing.GroupLayout rasterPanelLayout = new javax.swing.GroupLayout(rasterPanel);
        rasterPanel.setLayout(rasterPanelLayout);
        rasterPanelLayout.setHorizontalGroup(
            rasterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rasterPanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(exportButton))
            .addGroup(rasterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(rasterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(rasterPanelLayout.createSequentialGroup()
                        .addComponent(fixedButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(zValueFixed, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(rasterPanelLayout.createSequentialGroup()
                        .addComponent(affineButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(zValueAffine, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(rasterPanelLayout.createSequentialGroup()
                        .addComponent(directButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(zValueDirect, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(rasterPanelLayout.createSequentialGroup()
                        .addComponent(sourceButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(zValueSource, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(rasterPanelLayout.createSequentialGroup()
                        .addComponent(scaleButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(zValueAreal, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        rasterPanelLayout.setVerticalGroup(
            rasterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rasterPanelLayout.createSequentialGroup()
                .addGroup(rasterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sourceButton)
                    .addComponent(zValueSource, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addGroup(rasterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fixedButton)
                    .addComponent(zValueFixed, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addGroup(rasterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(affineButton)
                    .addComponent(zValueAffine, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(rasterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(directButton)
                    .addComponent(zValueDirect, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(1, 1, 1)
                .addGroup(rasterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(scaleButton)
                    .addComponent(zValueAreal, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(exportButton)
                .addContainerGap())
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1), "Z-value Statistics", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.BELOW_TOP, new java.awt.Font("Euphemia UCAS", 0, 14), new java.awt.Color(0, 102, 153))); // NOI18N
        jPanel2.setLayout(new java.awt.GridLayout(7, 2));

        zMinLabel.setFont(new java.awt.Font("Euphemia UCAS", 0, 12)); // NOI18N
        zMinLabel.setText("Minumum");
        zMinLabel.setToolTipText("");
        jPanel2.add(zMinLabel);

        zMinData.setFont(new java.awt.Font("Euphemia UCAS", 1, 12)); // NOI18N
        zMinData.setText("No data");
        jPanel2.add(zMinData);

        zMaxLabel.setFont(new java.awt.Font("Euphemia UCAS", 0, 12)); // NOI18N
        zMaxLabel.setText("Maximum");
        jPanel2.add(zMaxLabel);

        zMaxData.setFont(new java.awt.Font("Euphemia UCAS", 1, 12)); // NOI18N
        zMaxData.setText("No data");
        jPanel2.add(zMaxData);

        jLabel8.setFont(new java.awt.Font("Euphemia UCAS", 0, 12)); // NOI18N
        jLabel8.setText("Mean");
        jPanel2.add(jLabel8);

        meanData.setFont(new java.awt.Font("Euphemia UCAS", 1, 12)); // NOI18N
        meanData.setText("No data");
        jPanel2.add(meanData);

        jLabel12.setFont(new java.awt.Font("Euphemia UCAS", 0, 12)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(153, 0, 153));
        jLabel12.setText("Mean Corr.");
        jPanel2.add(jLabel12);

        meanCorrData.setFont(new java.awt.Font("Euphemia UCAS", 1, 12)); // NOI18N
        meanCorrData.setText("No data");
        jPanel2.add(meanCorrData);

        jLabel15.setFont(new java.awt.Font("Euphemia UCAS", 0, 12)); // NOI18N
        jLabel15.setText("St. Dev.");
        jPanel2.add(jLabel15);

        mrsqData.setFont(new java.awt.Font("Euphemia UCAS", 1, 12)); // NOI18N
        mrsqData.setText("No data");
        jPanel2.add(mrsqData);

        jLabel17.setFont(new java.awt.Font("Euphemia UCAS", 0, 12)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(153, 0, 153));
        jLabel17.setText("St. Dev. Corr.");
        jLabel17.setToolTipText("");
        jPanel2.add(jLabel17);

        mrsqCorrData.setFont(new java.awt.Font("Euphemia UCAS", 1, 12)); // NOI18N
        mrsqCorrData.setText("No data");
        jPanel2.add(mrsqCorrData);

        visPanel.setBackground(new java.awt.Color(255, 255, 255));
        visPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1), "Labels & Colors", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.BELOW_TOP, new java.awt.Font("Euphemia UCAS", 0, 14), new java.awt.Color(0, 102, 153))); // NOI18N
        visPanel.setPreferredSize(new java.awt.Dimension(200, 269));

        histGroup.add(minmaxButton);
        minmaxButton.setFont(new java.awt.Font("Euphemia UCAS", 0, 12)); // NOI18N
        minmaxButton.setSelected(true);
        minmaxButton.setText("Min–Max");
        minmaxButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                minmaxButtonItemStateChanged(evt);
            }
        });

        histGroup.add(equalizeButton);
        equalizeButton.setFont(new java.awt.Font("Euphemia UCAS", 0, 12)); // NOI18N
        equalizeButton.setText("Hist Eq.");
        equalizeButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                equalizeButtonItemStateChanged(evt);
            }
        });
        equalizeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                equalizeButtonActionPerformed(evt);
            }
        });

        histGroup.add(stdevButton);
        stdevButton.setFont(new java.awt.Font("Euphemia UCAS", 0, 12)); // NOI18N
        stdevButton.setText("St. Dev");
        stdevButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                stdevButtonItemStateChanged(evt);
            }
        });

        jSpinner1.setModel(new javax.swing.SpinnerNumberModel(1.0f, 0.5f, null, 0.5f));

        jLabel19.setText("σ:");

        colorBox.setFont(new java.awt.Font("Euphemia UCAS", 1, 13)); // NOI18N
        colorBox.setSelected(true);
        colorBox.setText("Colors");

        textBox.setFont(new java.awt.Font("Euphemia UCAS", 1, 13)); // NOI18N
        textBox.setText("Labels");
        textBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                textBoxItemStateChanged(evt);
            }
        });

        textButtonGroup.add(gammaButton);
        gammaButton.setFont(new java.awt.Font("Euphemia UCAS", 0, 12)); // NOI18N
        gammaButton.setText("γ");
        gammaButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                gammaButtonItemStateChanged(evt);
            }
        });
        gammaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gammaButtonActionPerformed(evt);
            }
        });

        textButtonGroup.add(deltaButton);
        deltaButton.setFont(new java.awt.Font("Euphemia UCAS", 0, 12)); // NOI18N
        deltaButton.setText("δ");
        deltaButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                deltaButtonItemStateChanged(evt);
            }
        });

        textButtonGroup.add(thetaButton);
        thetaButton.setFont(new java.awt.Font("Euphemia UCAS", 0, 12)); // NOI18N
        thetaButton.setText("θ");
        thetaButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                thetaButtonItemStateChanged(evt);
            }
        });

        textButtonGroup.add(betaButton);
        betaButton.setFont(new java.awt.Font("Euphemia UCAS", 0, 12)); // NOI18N
        betaButton.setText("β");
        betaButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                betaButtonItemStateChanged(evt);
            }
        });

        textButtonGroup.add(hButton);
        hButton.setFont(new java.awt.Font("Euphemia UCAS", 0, 12)); // NOI18N
        hButton.setText("h");
        hButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                hButtonItemStateChanged(evt);
            }
        });

        textButtonGroup.add(kButton);
        kButton.setFont(new java.awt.Font("Euphemia UCAS", 0, 12)); // NOI18N
        kButton.setText("k");
        kButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                kButtonItemStateChanged(evt);
            }
        });

        textButtonGroup.add(aButton);
        aButton.setFont(new java.awt.Font("Euphemia UCAS", 0, 12)); // NOI18N
        aButton.setText("a");
        aButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                aButtonItemStateChanged(evt);
            }
        });

        textButtonGroup.add(bButton);
        bButton.setFont(new java.awt.Font("Euphemia UCAS", 0, 12)); // NOI18N
        bButton.setText("b");
        bButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                bButtonItemStateChanged(evt);
            }
        });

        labelScaleSlider.setMaximumSize(new java.awt.Dimension(32767, 35));
        labelScaleSlider.setMinimumSize(new java.awt.Dimension(36, 35));
        labelScaleSlider.setPreferredSize(new java.awt.Dimension(190, 35));
        labelScaleSlider.setSize(new java.awt.Dimension(190, 35));
        labelScaleSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                labelScaleSliderStateChanged(evt);
            }
        });

        jLabel16.setFont(new java.awt.Font("Euphemia UCAS", 0, 12)); // NOI18N
        jLabel16.setText("Size:");

        textButtonGroup.add(wButton);
        wButton.setFont(new java.awt.Font("Euphemia UCAS", 0, 12)); // NOI18N
        wButton.setText("ω");
        wButton.setToolTipText("");
        wButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                wButtonItemStateChanged(evt);
            }
        });

        textButtonGroup.add(sButton);
        sButton.setFont(new java.awt.Font("Euphemia UCAS", 0, 12)); // NOI18N
        sButton.setText("s");
        sButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                sButtonItemStateChanged(evt);
            }
        });
        sButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout visPanelLayout = new javax.swing.GroupLayout(visPanel);
        visPanel.setLayout(visPanelLayout);
        visPanelLayout.setHorizontalGroup(
            visPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(visPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(visPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, visPanelLayout.createSequentialGroup()
                        .addComponent(minmaxButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(equalizeButton)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(visPanelLayout.createSequentialGroup()
                        .addGroup(visPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(visPanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel16)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labelScaleSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(visPanelLayout.createSequentialGroup()
                                .addGroup(visPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(colorBox)
                                    .addGroup(visPanelLayout.createSequentialGroup()
                                        .addComponent(stdevButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(visPanelLayout.createSequentialGroup()
                                        .addGroup(visPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(visPanelLayout.createSequentialGroup()
                                                .addGroup(visPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(deltaButton)
                                                    .addComponent(gammaButton))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(visPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(betaButton)
                                                    .addComponent(thetaButton)))
                                            .addComponent(textBox, javax.swing.GroupLayout.Alignment.LEADING))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(visPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(kButton)
                                            .addComponent(hButton)
                                            .addComponent(wButton))
                                        .addGap(0, 0, 0)
                                        .addGroup(visPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(bButton)
                                            .addComponent(aButton)
                                            .addComponent(sButton))))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())))
        );
        visPanelLayout.setVerticalGroup(
            visPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(visPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(visPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textBox)
                    .addComponent(wButton)
                    .addComponent(sButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(visPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(gammaButton)
                    .addComponent(thetaButton)
                    .addComponent(hButton)
                    .addComponent(aButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(visPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bButton, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(kButton, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(deltaButton, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(betaButton, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(visPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(labelScaleSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(colorBox)
                .addGap(2, 2, 2)
                .addGroup(visPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(minmaxButton)
                    .addComponent(equalizeButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(visPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(stdevButton)
                    .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19))
                .addGap(38, 38, 38))
        );

        javax.swing.GroupLayout rightPanelLayout = new javax.swing.GroupLayout(rightPanel);
        rightPanel.setLayout(rightPanelLayout);
        rightPanelLayout.setHorizontalGroup(
            rightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rightPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(rightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
                    .addComponent(visPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 188, Short.MAX_VALUE)
                    .addComponent(rasterPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 188, Short.MAX_VALUE))
                .addContainerGap())
        );
        rightPanelLayout.setVerticalGroup(
            rightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rightPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rasterPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(visPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(136, 136, 136))
        );

        getContentPane().add(rightPanel, java.awt.BorderLayout.EAST);

        GLPanel.setMaximumSize(new java.awt.Dimension(32767, 600));
        GLPanel.setPreferredSize(new java.awt.Dimension(1000, 695));
        GLPanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                GLPanelMouseMoved(evt);
            }
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                GLPanelMouseDragged(evt);
            }
        });

        javax.swing.GroupLayout GLPanelLayout = new javax.swing.GroupLayout(GLPanel);
        GLPanel.setLayout(GLPanelLayout);
        GLPanelLayout.setHorizontalGroup(
            GLPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1000, Short.MAX_VALUE)
        );
        GLPanelLayout.setVerticalGroup(
            GLPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 813, Short.MAX_VALUE)
        );

        getContentPane().add(GLPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed
        File file;
        JFileChooser fc = new JFileChooser();
        fc.setDialogTitle("Select data file(s)");
        fc.setMultiSelectionEnabled(true);

        FileFilter gf = new FileFilters.GridFilesFilter();
        fc.addChoosableFileFilter(gf);

        fc.setFileFilter(gf);

        fc.setCurrentDirectory(new File("/Volumes/Data/Work/Raster Processing/"));
        int res = fc.showOpenDialog(this);

        if(res == JFileChooser.APPROVE_OPTION){

            file = fc.getSelectedFile();

            Thread loadThread;
            loadThread = new Thread(new Runnable(){
                @Override
                public void run(){
                    try {
                        loadGrid(file);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            });

            loadThread.start();

        }
    }//GEN-LAST:event_loadButtonActionPerformed

    /**
     * Saves grid into the file
     * @param file
     * @param g
     * @throws InterruptedException
     */
    private void saveGrid(File file, Geogrid g) throws InterruptedException{
        procName.setText("Saving raster");

        progressBar.setStringPainted(true);
        progressBar.setIndeterminate(false);

        BoundedRangeModel progressModel = progressBar.getModel();

        progressModel.setValue(0);

        try {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            progressBar.setIndeterminate(false);

            progressBar.setValue(0);

            ESRIASCIIGridExporter.export(g, file, progressModel);

            progressBar.setValue(100);

            sleep(500);

            progressModel.setValue(0);

            procName.setText("Idle");

            progressBar.setStringPainted(false);

            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));

        } catch (IOException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
    /**
     * Loads grid into source layer
     * @param file
     * @throws InterruptedException
     */
    private void loadGrid(File file) throws InterruptedException{

        procName.setText("Reading raster");

        progressBar.setStringPainted(true);
        progressBar.setIndeterminate(false);

        BoundedRangeModel progressModel = progressBar.getModel();

        progressModel.setValue(0);

        projectionBox.setSelectedItem("Mercator");
        projection = ProjectionFactory.getNamedProjection((String)projectionBox.getSelectedItem());
        projection.setEllipsoid(Ellipsoid.SPHERE);
        projection.initialize();

        try {

            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

            Geogrid grid = EsriASCIIGridReader.read(file, progressModel);

            procName.setText("Preparing for display");

            progressBar.setIndeterminate(true);

            sourceLayer = new GridLayer(grid);

            ((MapPanel)(GLPanel)).stop();

            // Layer 0: source grid
            map.addLayer(sourceLayer);

            // Layer 1: fixed kernel shape
            map.addLayer(fixedLayer);

            // Layer 2: varible kernel shape
            map.addLayer(affineLayer);

            // Layer 3: areal distortions
            map.addLayer(directLayer);

            ((MapPanel)(GLPanel)).start();

            gp = new GridProcessor(grid, projection);

            ((MapPanel)(GLPanel)).setGraticuleEnvelope(gp.getEnvelope());

            // Fit into width
            ((MapPanel)(GLPanel)).fitWidth(0);

            sourceButton.setEnabled(true);

            progressModel.setValue(100);

            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));

            fileLabel.setText(file.getAbsolutePath());

            panButton.setSelected(true);

            /*
            Formatted labels
            */
            DecimalFormat numFormat= new DecimalFormat("##,###,###");
            xMinData.setText(numFormat.format(grid.getHeader().xmin));
            xMaxData.setText(numFormat.format(grid.getHeader().xmax));
            yMinData.setText(numFormat.format(grid.getHeader().ymin));
            yMaxData.setText(numFormat.format(grid.getHeader().ymax));

            numFormat= new DecimalFormat("##,###");
            rowData.setText(numFormat.format(grid.getHeader().nrow));
            colData.setText(numFormat.format(grid.getHeader().ncol));

            numFormat= new DecimalFormat("##,###.#");
            zMinData.setText(numFormat.format(grid.getHeader().zmin));
            zMaxData.setText(numFormat.format(grid.getHeader().zmax));
            resData.setText(numFormat.format(grid.getHeader().res));

            // CALCULATE STATISTICS

            procName.setText("Calculating statistics");

            grid.calculateStatistics();
            meanData.setText(numFormat.format(grid.getMean()));
            mrsqData.setText(numFormat.format(grid.getMrsq()));

            procName.setText("Calculating areal distortions");

            progressBar.setIndeterminate(false);

            gp.setFilterMethod(Stats.FilterMethod.DISTAREAL);

            map.showCursor(true);
            gp.execute(progressModel, map.getCursor());
            map.showCursor(false);

            Geogrid distgrid = gp.getResult();
            distgrid.calculateStatistics();
            distgrid.calculateWeightedStatistics(distgrid);
            distLayer = new GridLayer(distgrid);
            distLayer.setVisible(false);

            ((MapPanel)(GLPanel)).stop();
            // Layer 4: areal distortions
            map.addLayer(distLayer);
            ((MapPanel)(GLPanel)).start();

            progressBar.setIndeterminate(true);
            procName.setText("Calculating weighted statistics");

            grid.calculateWeightedStatistics(distLayer.getGrid());
            meanCorrData.setText(numFormat.format(grid.getWeightedMean()));
            mrsqCorrData.setText(numFormat.format(grid.getWeightedMrsq()));

            gp.setFilterMethod(Stats.FilterMethod.MEAN);

            gp.setKernelSize((int)kernelSpinner.getValue()*1000);

            scaleButton.setEnabled(true);

            progressBar.setIndeterminate(false);

            progressBar.setValue(100);

            sleep(500);

            progressModel.setValue(0);

            procName.setText("Idle");

            progressBar.setStringPainted(false);

        } catch (IOException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void processGrid(GridProcessor.ProcessingType type){
        if(gp != null){

            procName.setText("Filtering raster");
            progressBar.setStringPainted(true);
            BoundedRangeModel progressModel = progressBar.getModel();
            progressModel.setValue(0);

            gp.setGrid(sourceLayer.getGrid());
            gp.setType(type);
            gp.setZfactor((float)zSpinner.getValue());
            gp.setDfactor((float)fSpinner.getValue());
            gp.setControlZones(((MapPanel)(GLPanel)).getControlZones());
            gp.setFilterMethod((FilterMethod)operationBox.getSelectedItem());

            map.showCursor(true);
            gp.execute(progressModel, map.getCursor());
            map.showCursor(false);

            Geogrid result = gp.getResult();

            DecimalFormat numFormat= new DecimalFormat("##,###.#");

            result.calculateStatistics();
            meanData.setText(numFormat.format(result.getMean()));
            mrsqData.setText(numFormat.format(result.getMrsq()));

            result.calculateWeightedStatistics(distLayer.getGrid());
            meanCorrData.setText(numFormat.format(result.getWeightedMean()));
            mrsqCorrData.setText(numFormat.format(result.getWeightedMrsq()));

            progressModel.setValue(100);

            procName.setText("Preparing for display");

            progressBar.setIndeterminate(true);

            ((MapPanel)(GLPanel)).stop();

            // map has four data layers: source, fixed, affine and direct
            switch(type){
                case AFFINE:
                    affineLayer = new GridLayer(result);
                    map.setLayer(affineLayer, 2);

                    affineButton.setEnabled(true);
                    affineButton.setSelected(true);


                    if(fixedLayer != null){
                        fixedLayer.setVisible(false);
                    }

                    if(directLayer != null){
                        directLayer.setVisible(false);
                    }

                    break;
                case DIRECT:
                    directLayer = new GridLayer(result);
                    map.setLayer(directLayer, 3);

                    directButton.setEnabled(true);
                    directButton.setSelected(true);


                    if(affineLayer != null){
                        affineLayer.setVisible(false);
                    }
                    if(fixedLayer != null){
                        fixedLayer.setVisible(false);
                    }
                    break;
                case SIMPLE:
                default:
                    fixedLayer = new GridLayer(result);
                    map.setLayer(fixedLayer, 1);

                    fixedButton.setSelected(true);
                    fixedButton.setEnabled(true);

                    if(affineLayer != null){
                        affineLayer.setVisible(false);
                    }
                    if(directLayer != null){
                        directLayer.setVisible(false);
                    }
                    break;
            }
            minmaxButton.setSelected(true);
            sourceLayer.setVisible(false);

            ((MapPanel)(GLPanel)).start();

            progressBar.setIndeterminate(false);

            progressModel.setValue(100);

            try {
                sleep(500);
            } catch (InterruptedException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }

            progressBar.setStringPainted(false);

            progressModel.setValue(0);

            procName.setText("Idle");
        }
    }

    private void fitWidthButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fitWidthButtonActionPerformed
//        if(sourceButton.isSelected()){
//            ((MapPanel)(GLPanel)).setFit(0,1);
//        } else if (fixedButton.isSelected()){
//            ((MapPanel)(GLPanel)).setFit(1,1);
//        } else {
//            ((MapPanel)(GLPanel)).setFit(2,1);
//        }
        ((MapPanel)(GLPanel)).fitWidth(0);
    }//GEN-LAST:event_fitWidthButtonActionPerformed

    private void fitHeightButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fitHeightButtonActionPerformed
//        if(sourceButton.isSelected()){
//            ((MapPanel)(GLPanel)).setFit(0,2);
//        } else if (fixedButton.isSelected()){
//            ((MapPanel)(GLPanel)).setFit(1,2);
//        } else {
//            ((MapPanel)(GLPanel)).setFit(2,2);
//        }

        ((MapPanel)(GLPanel)).fitHeight(0);
    }//GEN-LAST:event_fitHeightButtonActionPerformed

    private void panButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_panButtonItemStateChanged
        if (evt.getStateChange()==ItemEvent.SELECTED){
            GLPanel.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
            ((MapPanel)GLPanel).setMovable(true);
        } else {
            ((MapPanel)GLPanel).setMovable(false);
        }
    }//GEN-LAST:event_panButtonItemStateChanged

    private void selectButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_selectButtonItemStateChanged
        if (evt.getStateChange()==ItemEvent.SELECTED){
            GLPanel.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
    }//GEN-LAST:event_selectButtonItemStateChanged

    private void zoomInButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_zoomInButtonItemStateChanged
        if (evt.getStateChange()==ItemEvent.SELECTED){
            GLPanel.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
    }//GEN-LAST:event_zoomInButtonItemStateChanged

    private void zoomOutButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_zoomOutButtonItemStateChanged
        if (evt.getStateChange()==ItemEvent.SELECTED){
            GLPanel.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
    }//GEN-LAST:event_zoomOutButtonItemStateChanged

    private void affineButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_affineButtonItemStateChanged
        int stateChange = evt.getStateChange();
        // Display clipped graticule
        if (stateChange == 1){
            if(affineLayer != null){
                affineLayer.setVisible(true);

                ((MapPanel)(GLPanel)).setZLayerNumber(2);
                ((MapPanel)(GLPanel)).setZLabel(zValueAffine);

                DecimalFormat numFormat= new DecimalFormat("##,###.#");

                zMinData.setText(numFormat.format(affineLayer.getGrid().getHeader().zmin));
                zMaxData.setText(numFormat.format(affineLayer.getGrid().getHeader().zmax));

                meanData.setText(numFormat.format(affineLayer.getGrid().getMean()));
                mrsqData.setText(numFormat.format(affineLayer.getGrid().getMrsq()));

                meanCorrData.setText(numFormat.format(affineLayer.getGrid().getWeightedMean()));
                mrsqCorrData.setText(numFormat.format(affineLayer.getGrid().getWeightedMrsq()));

                StretchMethod sm = affineLayer.getStretchMethod();

                switch(sm){
                    case MINMAX:
                        minmaxButton.setSelected(true);
                        break;
                    case EQUALIZE:
                        equalizeButton.setSelected(true);
                        break;
                    case STDEV:
                        stdevButton.setSelected(true);
                        break;
                    default:
                        minmaxButton.setSelected(true);
                        break;
                }

            }
            if(sourceLayer != null){
                sourceLayer.setVisible(false);
            }
            if(fixedLayer != null){
                fixedLayer.setVisible(false);
            }
            if(directLayer != null){
                directLayer.setVisible(false);
            }
            if(distLayer != null){
                distLayer.setVisible(false);
            }

        }

    }//GEN-LAST:event_affineButtonItemStateChanged

    private void fixedButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_fixedButtonItemStateChanged
        int stateChange = evt.getStateChange();
        // Display clipped graticule
        if (stateChange == 1){
            if(fixedLayer != null){
                fixedLayer.setVisible(true);

                ((MapPanel)(GLPanel)).setZLayerNumber(1);
                ((MapPanel)(GLPanel)).setZLabel(zValueFixed);

                DecimalFormat numFormat= new DecimalFormat("##,###.#");

                zMinData.setText(numFormat.format(fixedLayer.getGrid().getHeader().zmin));
                zMaxData.setText(numFormat.format(fixedLayer.getGrid().getHeader().zmax));

                meanData.setText(numFormat.format(fixedLayer.getGrid().getMean()));
                mrsqData.setText(numFormat.format(fixedLayer.getGrid().getMrsq()));

                meanCorrData.setText(numFormat.format(fixedLayer.getGrid().getWeightedMean()));
                mrsqCorrData.setText(numFormat.format(fixedLayer.getGrid().getWeightedMrsq()));

                StretchMethod sm = fixedLayer.getStretchMethod();

                switch(sm){
                    case MINMAX:
                        minmaxButton.setSelected(true);
                        break;
                    case EQUALIZE:
                        equalizeButton.setSelected(true);
                        break;
                    case STDEV:
                        stdevButton.setSelected(true);
                        break;
                    default:
                        minmaxButton.setSelected(true);
                        break;
                }
            }
            if(sourceLayer != null){
                sourceLayer.setVisible(false);
            }
            if(affineLayer != null){
                affineLayer.setVisible(false);
            }
            if(directLayer != null){
                directLayer.setVisible(false);
            }
            if(distLayer != null){
                distLayer.setVisible(false);
            }
        }
    }//GEN-LAST:event_fixedButtonItemStateChanged

    private void sourceButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_sourceButtonItemStateChanged
        int stateChange = evt.getStateChange();

        if (stateChange == 1){
            if(sourceLayer != null){
                sourceLayer.setVisible(true);

                ((MapPanel)(GLPanel)).setZLayerNumber(0);
                ((MapPanel)(GLPanel)).setZLabel(zValueSource);

                DecimalFormat numFormat= new DecimalFormat("##,###.#");

                zMinData.setText(numFormat.format(sourceLayer.getGrid().getHeader().zmin));
                zMaxData.setText(numFormat.format(sourceLayer.getGrid().getHeader().zmax));

                meanData.setText(numFormat.format(sourceLayer.getGrid().getMean()));
                mrsqData.setText(numFormat.format(sourceLayer.getGrid().getMrsq()));

                meanCorrData.setText(numFormat.format(sourceLayer.getGrid().getWeightedMean()));
                mrsqCorrData.setText(numFormat.format(sourceLayer.getGrid().getWeightedMrsq()));

                StretchMethod sm = sourceLayer.getStretchMethod();

                switch(sm){
                    case MINMAX:
                        minmaxButton.setSelected(true);
                        break;
                    case EQUALIZE:
                        equalizeButton.setSelected(true);
                        break;
                    case STDEV:
                        stdevButton.setSelected(true);
                        break;
                    default:
                        minmaxButton.setSelected(true);
                        break;
                }

            }
            if(fixedLayer != null){
                fixedLayer.setVisible(false);
            }
            if(affineLayer != null){
                affineLayer.setVisible(false);
            }

            if(directLayer != null){
                affineLayer.setVisible(false);
            }

            if(distLayer != null){
                distLayer.setVisible(false);
            }


        }
    }//GEN-LAST:event_sourceButtonItemStateChanged

    private void exportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportButtonActionPerformed
        File file;
        JFileChooser fc = new JFileChooser();
        fc.setDialogTitle("Select data file(s)");
        fc.setMultiSelectionEnabled(true);

        FileFilter gf = new FileFilters.GridFilesFilter();
        fc.addChoosableFileFilter(gf);

        fc.setFileFilter(gf);

        fc.setCurrentDirectory(new File("/Volumes/Data/Work/Raster Processing/"));
        int res = fc.showSaveDialog(this);

        if(res == JFileChooser.APPROVE_OPTION){

            file = fc.getSelectedFile();

            Thread loadThread;
            loadThread = new Thread(new Runnable(){

                @Override
                public void run(){
                    try {
                        Geogrid g = sourceLayer.getGrid();
                        if(fixedButton.isSelected()){
                            g = fixedLayer.getGrid();
                        } else if (affineButton.isSelected()){
                            g = affineLayer.getGrid();
                        } else if (directButton.isSelected()){
                            g = directLayer.getGrid();
                        } else if (scaleButton.isSelected()){
                            g = distLayer.getGrid();
                        }
                        saveGrid(file, g);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            });

            loadThread.start();

        }
    }//GEN-LAST:event_exportButtonActionPerformed

    private void fireProjectionChanged() {
        if(sourceLayer != null){

            procName.setText("Recalculating graticule");
            progressBar.setIndeterminate(true);

            ((MapPanel)(GLPanel)).setProjection(projection);


            procName.setText("Calculating distortions");
            progressBar.setIndeterminate(false);
            progressBar.setStringPainted(true);
            BoundedRangeModel progressModel = progressBar.getModel();
            progressModel.setValue(0);

            gp = new GridProcessor(sourceLayer.getGrid(),projection);

            gp.setFilterMethod(Stats.FilterMethod.DISTAREAL);
            gp.execute(progressModel, map.getCursor());
            Geogrid distgrid = gp.getResult();
            distLayer = new GridLayer(distgrid);
            distLayer.setVisible(false);

            ((MapPanel)(GLPanel)).stop();
            map.setLayer(distLayer, 4);
            ((MapPanel)(GLPanel)).start();

            progressBar.setIndeterminate(true);

            procName.setText("Calculating statistics");
            distgrid.calculateStatistics();
            distgrid.calculateWeightedStatistics(distgrid);
            sourceLayer.getGrid().calculateWeightedStatistics(distgrid);

            if(fixedLayer != null){
                fixedLayer.getGrid().calculateWeightedStatistics(distgrid);
            }

            if(affineLayer != null){
                affineLayer.getGrid().calculateWeightedStatistics(distgrid);
            }

            progressBar.setIndeterminate(false);

            progressBar.setValue(100);

            try {
                sleep(500);
            } catch (InterruptedException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }

            progressBar.setStringPainted(false);

            progressModel.setValue(0);

            procName.setText("Idle");

        }
    }

    private void scaleButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_scaleButtonItemStateChanged
        int stateChange = evt.getStateChange();

        if (stateChange == 1){
            if(distLayer != null){
                distLayer.setVisible(true);

                ((MapPanel)(GLPanel)).setZLayerNumber(4);
                ((MapPanel)(GLPanel)).setZLabel(zValueAreal);

                DecimalFormat numFormat= new DecimalFormat("##,###.#");

                zMinData.setText(numFormat.format(distLayer.getGrid().getHeader().zmin));
                zMaxData.setText(numFormat.format(distLayer.getGrid().getHeader().zmax));

                meanData.setText(numFormat.format(distLayer.getGrid().getMean()));
                mrsqData.setText(numFormat.format(distLayer.getGrid().getMrsq()));

                meanCorrData.setText(numFormat.format(distLayer.getGrid().getWeightedMean()));
                mrsqCorrData.setText(numFormat.format(distLayer.getGrid().getWeightedMrsq()));

                StretchMethod sm = distLayer.getStretchMethod();

                switch(sm){
                    case MINMAX:
                        minmaxButton.setSelected(true);
                        break;
                    case EQUALIZE:
                        equalizeButton.setSelected(true);
                        break;
                    case STDEV:
                        stdevButton.setSelected(true);
                        break;
                    default:
                        minmaxButton.setSelected(true);
                        break;
                }

            }

            if(sourceLayer != null){
                sourceLayer.setVisible(false);
            }

            if(fixedLayer != null){
                fixedLayer.setVisible(false);
            }

            if(affineLayer != null){
                affineLayer.setVisible(false);
            }

            if(directLayer != null){
                directLayer.setVisible(false);
            }


        }
    }//GEN-LAST:event_scaleButtonItemStateChanged

    private void fixButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fixButtonActionPerformed
        Thread loadThread;
        loadThread = new Thread(new Runnable(){
            @Override
            public void run(){
                processGrid(ProcessingType.SIMPLE);
            }
        });

        loadThread.start();
    }//GEN-LAST:event_fixButtonActionPerformed

    private void fixButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fixButtonMouseEntered
        fixButton.setBackground(Color.GRAY);
    }//GEN-LAST:event_fixButtonMouseEntered

    private void fixButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fixButtonMouseExited
        fixButton.setBackground(Color.LIGHT_GRAY);
    }//GEN-LAST:event_fixButtonMouseExited

    private void projectionDetailsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_projectionDetailsButtonActionPerformed
        showProjectionsDetailDialog();
    }//GEN-LAST:event_projectionDetailsButtonActionPerformed

    private void showProjectionsDetailDialog(){
        ProjectionParametersDialog dialog = new ProjectionParametersDialog(this, true, projection);

        dialog.setVisible(true);

        if(dialog.isModified()){
            Projection newProjection = dialog.getModifiedProjection();
            if(newProjection != null){
                projection = newProjection;
                Thread loadThread;
                loadThread = new Thread(new Runnable(){
                    @Override
                    public void run(){
                        fireProjectionChanged();
                    }

                });

                loadThread.start();
            }
        }
    }
    private void voronoyBoxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_voronoyBoxStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_voronoyBoxStateChanged

    private void voronoyBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_voronoyBoxItemStateChanged
        int stateChange = evt.getStateChange();
        // Display clipped graticule
        if (stateChange == 1){
            ((MapPanel)(GLPanel)).showVoronoy(true);
        } else {
            ((MapPanel)(GLPanel)).showVoronoy(false);
        }
    }//GEN-LAST:event_voronoyBoxItemStateChanged

    private void clipBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_clipBoxItemStateChanged
        int stateChange = evt.getStateChange();
        // Display clipped graticule
        if (stateChange == 1){
            ((MapPanel)(GLPanel)).setGraticuleClipped(true);
        } else {
            ((MapPanel)(GLPanel)).setGraticuleClipped(false);
        }
    }//GEN-LAST:event_clipBoxItemStateChanged

    private void tissotSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tissotSliderStateChanged
        int value = tissotSlider.getValue();
        ((MapPanel)(GLPanel)).setTissotScale((double)value/100);
    }//GEN-LAST:event_tissotSliderStateChanged

    private void lamSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_lamSpinnerStateChanged
        fireGraticuleChanged();
    }//GEN-LAST:event_lamSpinnerStateChanged

    private void phiSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_phiSpinnerStateChanged
        fireGraticuleChanged();
    }//GEN-LAST:event_phiSpinnerStateChanged

    private void kernelSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_kernelSpinnerStateChanged
        int value = (Integer)kernelSpinner.getValue();
        kernelSlider.setValue(value);
        gp.setKernelSize((int)kernelSpinner.getValue()*1000);
    }//GEN-LAST:event_kernelSpinnerStateChanged

    private void affButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_affButtonActionPerformed
        Thread loadThread;
        loadThread = new Thread(new Runnable(){
            @Override
            public void run(){
                processGrid(ProcessingType.AFFINE);
            }
        });

        loadThread.start();
    }//GEN-LAST:event_affButtonActionPerformed

    private void affButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_affButtonMouseEntered
        affButton.setBackground(Color.GRAY);
    }//GEN-LAST:event_affButtonMouseEntered

    private void affButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_affButtonMouseExited
        affButton.setBackground(Color.LIGHT_GRAY);
    }//GEN-LAST:event_affButtonMouseExited

    private void operationBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_operationBoxItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_operationBoxItemStateChanged

    private void tissotBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tissotBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tissotBoxActionPerformed

    private void tissotBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_tissotBoxItemStateChanged
        int stateChange = evt.getStateChange();
        // Show graticule
        if (stateChange == 1){
            ((MapPanel)(GLPanel)).showTissot(true);
        } else {
            ((MapPanel)(GLPanel)).showTissot(false);
        }
    }//GEN-LAST:event_tissotBoxItemStateChanged

    private void graticuleBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_graticuleBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_graticuleBoxActionPerformed

    private void graticuleBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_graticuleBoxItemStateChanged

        int stateChange = evt.getStateChange();
        // Show graticule
        if (stateChange == 1){
            ((MapPanel)(GLPanel)).showGraticule(true);
        } else {
            ((MapPanel)(GLPanel)).showGraticule(false);
        }

    }//GEN-LAST:event_graticuleBoxItemStateChanged

    private void longSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_longSpinnerStateChanged
        fireGraticuleChanged();
    }//GEN-LAST:event_longSpinnerStateChanged

    private void latSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_latSpinnerStateChanged
        fireGraticuleChanged();
    }//GEN-LAST:event_latSpinnerStateChanged

    private void kernelSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_kernelSliderStateChanged
        int value = kernelSlider.getValue();
        kernelSpinner.setValue(value);
    }//GEN-LAST:event_kernelSliderStateChanged

    private void projectionBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_projectionBoxItemStateChanged
//        projection = ProjectionFactory.getNamedProjection((String)projectionBox.getSelectedItem());
//        projection.setEllipsoid(Ellipsoid.SPHERE);
//        projection.initialize();
//        Thread loadThread;
//        loadThread = new Thread(new Runnable(){
//            @Override
//            public void run(){
//                fireProjectionChanged();
//            }
//
//        });
//
//        loadThread.start();
    }//GEN-LAST:event_projectionBoxItemStateChanged

    private void dirButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dirButtonMouseExited
        dirButton.setBackground(Color.LIGHT_GRAY);
    }//GEN-LAST:event_dirButtonMouseExited

    private void dirButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dirButtonMouseEntered
        dirButton.setBackground(Color.GRAY);
    }//GEN-LAST:event_dirButtonMouseEntered

    private void dirButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dirButtonActionPerformed
        Thread loadThread;
        loadThread = new Thread(new Runnable(){
            @Override
            public void run(){
                processGrid(ProcessingType.DIRECT);
            }
        });

        loadThread.start();
    }//GEN-LAST:event_dirButtonActionPerformed

    private void directButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_directButtonItemStateChanged
        int stateChange = evt.getStateChange();
        // Display clipped graticule
        if (stateChange == 1){
            if(sourceLayer != null){
                sourceLayer.setVisible(false);
            }
            if(fixedLayer != null){
                fixedLayer.setVisible(false);
            }
            if(affineLayer != null){
                affineLayer.setVisible(false);
            }
            if(directLayer != null){
                directLayer.setVisible(true);

                ((MapPanel)(GLPanel)).setZLayerNumber(3);
                ((MapPanel)(GLPanel)).setZLabel(zValueDirect);

                DecimalFormat numFormat= new DecimalFormat("##,###.#");

                zMinData.setText(numFormat.format(directLayer.getGrid().getHeader().zmin));
                zMaxData.setText(numFormat.format(directLayer.getGrid().getHeader().zmax));

                meanData.setText(numFormat.format(directLayer.getGrid().getMean()));
                mrsqData.setText(numFormat.format(directLayer.getGrid().getMrsq()));

                meanCorrData.setText(numFormat.format(directLayer.getGrid().getWeightedMean()));
                mrsqCorrData.setText(numFormat.format(directLayer.getGrid().getWeightedMrsq()));

                StretchMethod sm = directLayer.getStretchMethod();

                switch(sm){
                    case MINMAX:
                        minmaxButton.setSelected(true);
                        break;
                    case EQUALIZE:
                        equalizeButton.setSelected(true);
                        break;
                    case STDEV:
                        stdevButton.setSelected(true);
                        break;
                    default:
                        minmaxButton.setSelected(true);
                        break;
                }

            }
            if(distLayer != null){
                distLayer.setVisible(false);
            }
        }
    }//GEN-LAST:event_directButtonItemStateChanged

    private void directButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_directButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_directButtonActionPerformed

    private void projectionBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_projectionBoxActionPerformed
        projection = ProjectionFactory.getNamedProjection((String)projectionBox.getSelectedItem());
        projection.setEllipsoid(Ellipsoid.SPHERE);
        projection.initialize();
        Thread loadThread;
        loadThread = new Thread(new Runnable(){
            @Override
            public void run(){
                fireProjectionChanged();
            }

        });

        loadThread.start();
    }//GEN-LAST:event_projectionBoxActionPerformed

    private void GLPanelMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GLPanelMouseMoved

    }//GEN-LAST:event_GLPanelMouseMoved

    private void fixedButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fixedButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fixedButtonActionPerformed

    private void formMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseMoved
    }//GEN-LAST:event_formMouseMoved

    private void GLPanelMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GLPanelMouseDragged
        // TODO add your handling code here:
    }//GEN-LAST:event_GLPanelMouseDragged

    private void sButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sButtonActionPerformed

    private void sButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_sButtonItemStateChanged
        fireGraticuleLabelChanged();
    }//GEN-LAST:event_sButtonItemStateChanged

    private void wButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_wButtonItemStateChanged
        fireGraticuleLabelChanged();
    }//GEN-LAST:event_wButtonItemStateChanged

    private void bButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_bButtonItemStateChanged
        fireGraticuleLabelChanged();
    }//GEN-LAST:event_bButtonItemStateChanged

    private void aButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_aButtonItemStateChanged
        fireGraticuleLabelChanged();
    }//GEN-LAST:event_aButtonItemStateChanged

    private void kButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_kButtonItemStateChanged
        fireGraticuleLabelChanged();
    }//GEN-LAST:event_kButtonItemStateChanged

    private void hButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_hButtonItemStateChanged
        fireGraticuleLabelChanged();
    }//GEN-LAST:event_hButtonItemStateChanged

    private void betaButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_betaButtonItemStateChanged
        fireGraticuleLabelChanged();
    }//GEN-LAST:event_betaButtonItemStateChanged

    private void thetaButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_thetaButtonItemStateChanged
        fireGraticuleLabelChanged();
    }//GEN-LAST:event_thetaButtonItemStateChanged

    private void deltaButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_deltaButtonItemStateChanged
        fireGraticuleLabelChanged();
    }//GEN-LAST:event_deltaButtonItemStateChanged

    private void gammaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gammaButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_gammaButtonActionPerformed

    private void gammaButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_gammaButtonItemStateChanged
        fireGraticuleLabelChanged();
    }//GEN-LAST:event_gammaButtonItemStateChanged

    private void textBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_textBoxItemStateChanged
        int stateChange = evt.getStateChange();
        // Show graticule
        if (stateChange == 1){
            ((MapPanel)(GLPanel)).showLabels(true);
        } else {
            ((MapPanel)(GLPanel)).showLabels(false);
        }
    }//GEN-LAST:event_textBoxItemStateChanged

    private void stdevButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_stdevButtonItemStateChanged
        fireHistogramStretchChanged();
    }//GEN-LAST:event_stdevButtonItemStateChanged

    private void equalizeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_equalizeButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_equalizeButtonActionPerformed

    private void equalizeButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_equalizeButtonItemStateChanged
        fireHistogramStretchChanged();
    }//GEN-LAST:event_equalizeButtonItemStateChanged

    private void minmaxButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_minmaxButtonItemStateChanged
        fireHistogramStretchChanged();
    }//GEN-LAST:event_minmaxButtonItemStateChanged

    private void labelScaleSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_labelScaleSliderStateChanged
        int value = labelScaleSlider.getValue();
        ((MapPanel)(GLPanel)).setLabelsScale(0.5f + 1.5f*(float)value/100);
    }//GEN-LAST:event_labelScaleSliderStateChanged

    private void fireHistogramStretchChanged(){
        GridLayer lyr = sourceLayer;
        if(fixedButton.isSelected()){
            lyr = fixedLayer;
        } else if (affineButton.isSelected()){
            lyr = affineLayer;
        } else if (directButton.isSelected()){
            lyr = directLayer;
        } else if (sourceButton.isSelected()){
            lyr = sourceLayer;
        } else {
            lyr = distLayer;
        }

        if(minmaxButton.isSelected()){
            lyr.setStretchmethod(Stats.StretchMethod.MINMAX);
        } else if (equalizeButton.isSelected()){
            lyr.setStretchmethod(Stats.StretchMethod.EQUALIZE);
        } else {
            lyr.setStretchmethod(Stats.StretchMethod.STDEV);
        }
    }
    /**
     * Sets graticule parameters according to user changes
     */
    private void fireGraticuleChanged(){
        int phi0 = (Integer)phiSpinner.getValue();
        int lam0 = (Integer)lamSpinner.getValue();
        float phiStep = (Float)latSpinner.getValue();
        int lamStep = (Integer)longSpinner.getValue();
        ((MapPanel)(GLPanel)).setGraticule(phi0, lam0, phiStep, lamStep);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel GLPanel;
    private javax.swing.JRadioButton aButton;
    private javax.swing.JButton affButton;
    private javax.swing.JRadioButton affineButton;
    private javax.swing.JRadioButton bButton;
    private javax.swing.JRadioButton betaButton;
    private javax.swing.JToggleButton circleButton;
    private javax.swing.JCheckBox clipBox;
    private javax.swing.JLabel colData;
    private javax.swing.JLabel colLabel;
    private javax.swing.JCheckBox colorBox;
    private javax.swing.JRadioButton deltaButton;
    private javax.swing.JButton dirButton;
    private javax.swing.JRadioButton directButton;
    private javax.swing.ButtonGroup displayGroup;
    private javax.swing.JRadioButton equalizeButton;
    private javax.swing.JLabel fLabel;
    private javax.swing.JSpinner fSpinner;
    private javax.swing.JLabel fileLabel;
    private javax.swing.JButton fitHeightButton;
    private javax.swing.JButton fitWidthButton;
    private javax.swing.JButton fixButton;
    private javax.swing.JRadioButton fixedButton;
    private javax.swing.JRadioButton gammaButton;
    private javax.swing.JCheckBox graticuleBox;
    private javax.swing.JRadioButton hButton;
    private javax.swing.ButtonGroup histGroup;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator10;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JToolBar.Separator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JSeparator jSeparator8;
    private javax.swing.JSeparator jSeparator9;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JRadioButton kButton;
    private javax.swing.ButtonGroup kernelGroup;
    private javax.swing.JSlider kernelSlider;
    private javax.swing.JSpinner kernelSpinner;
    private javax.swing.JSlider labelScaleSlider;
    private javax.swing.JSpinner lamSpinner;
    private javax.swing.JSpinner latSpinner;
    private javax.swing.JButton loadButton;
    private javax.swing.JSpinner longSpinner;
    private javax.swing.JToolBar mainToolBar;
    private javax.swing.JLabel meanCorrData;
    private javax.swing.JLabel meanData;
    private javax.swing.JRadioButton minmaxButton;
    private javax.swing.JLabel mrsqCorrData;
    private javax.swing.JLabel mrsqData;
    private javax.swing.ButtonGroup naviButtonGroup;
    private javax.swing.JToolBar naviToolbar;
    private javax.swing.JComboBox operationBox;
    private javax.swing.JToggleButton panButton;
    private javax.swing.JSpinner phiSpinner;
    private javax.swing.JPanel prefsPanel;
    private javax.swing.JLabel procLabel;
    private javax.swing.JLabel procName;
    private javax.swing.JPanel procPanel;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JPanel progressPanel;
    private javax.swing.JComboBox projectionBox;
    private javax.swing.JButton projectionDetailsButton;
    private javax.swing.JPanel rasterPanel;
    private javax.swing.JLabel resData;
    private javax.swing.JLabel resLabel;
    private javax.swing.JPanel rightPanel;
    private javax.swing.JLabel rowData;
    private javax.swing.JLabel rowLabel;
    private javax.swing.JRadioButton sButton;
    private javax.swing.JRadioButton scaleButton;
    private javax.swing.JToggleButton selectButton;
    private javax.swing.JRadioButton sourceButton;
    private javax.swing.JToggleButton squareButton;
    private javax.swing.JPanel statsPanel;
    private javax.swing.JRadioButton stdevButton;
    private javax.swing.JCheckBox textBox;
    private javax.swing.ButtonGroup textButtonGroup;
    private javax.swing.JRadioButton thetaButton;
    private javax.swing.JCheckBox tissotBox;
    private javax.swing.JSlider tissotSlider;
    private javax.swing.JPanel toolsPanel;
    private javax.swing.JPanel visPanel;
    private javax.swing.JCheckBox voronoyBox;
    private javax.swing.JRadioButton wButton;
    private javax.swing.JLabel xLabel;
    private javax.swing.JLabel xMaxData;
    private javax.swing.JLabel xMaxLabel;
    private javax.swing.JLabel xMinData;
    private javax.swing.JLabel xMinLabel;
    private javax.swing.JLabel xValue;
    private javax.swing.JLabel yLabel;
    private javax.swing.JLabel yMaxData;
    private javax.swing.JLabel yMinData;
    private javax.swing.JLabel yValue;
    private javax.swing.JLabel zLabel;
    private javax.swing.JLabel zMaxData;
    private javax.swing.JLabel zMaxLabel;
    private javax.swing.JLabel zMinData;
    private javax.swing.JLabel zMinLabel;
    private javax.swing.JSpinner zSpinner;
    private javax.swing.JLabel zValueAffine;
    private javax.swing.JLabel zValueAreal;
    private javax.swing.JLabel zValueDirect;
    private javax.swing.JLabel zValueFixed;
    private javax.swing.JLabel zValueSource;
    private javax.swing.JToggleButton zoomInButton;
    private javax.swing.JToggleButton zoomOutButton;
    // End of variables declaration//GEN-END:variables

    private void fireGraticuleLabelChanged() {

        if(gammaButton.isSelected()){
            ((MapPanel)(GLPanel)).setGraticuleLabelParameter("conv");
        } else if(deltaButton.isSelected()){
            ((MapPanel)(GLPanel)).setGraticuleLabelParameter("conv2");
        } else if(thetaButton.isSelected()){
            ((MapPanel)(GLPanel)).setGraticuleLabelParameter("thetap");
        } else if(betaButton.isSelected()){
            ((MapPanel)(GLPanel)).setGraticuleLabelParameter("beta");
        } else if(hButton.isSelected()){
            ((MapPanel)(GLPanel)).setGraticuleLabelParameter("h");
        } else if(kButton.isSelected()){
            ((MapPanel)(GLPanel)).setGraticuleLabelParameter("k");
        } else if(aButton.isSelected()){
            ((MapPanel)(GLPanel)).setGraticuleLabelParameter("a");
        } else if(bButton.isSelected()){
            ((MapPanel)(GLPanel)).setGraticuleLabelParameter("b");
        } else if(wButton.isSelected()){
            ((MapPanel)(GLPanel)).setGraticuleLabelParameter("omega");
        } else if(sButton.isSelected()){
            ((MapPanel)(GLPanel)).setGraticuleLabelParameter("s");
        }

    }
}
